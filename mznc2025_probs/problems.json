{
    "atsp": {
        "description": "",
        "script": "% input parameters\n\nint: reference_makespan;\nint: reference_waste;\nint: reference_tardiness;\n\n\nint: program_setup_time;\nint: sequence_setup_time;\n\nint: additional_setup_time = program_setup_time - sequence_setup_time;\n\nint: max_colors_per_job;\nint: max_moulds_per_job = max(slots_per_program);\n\nint: min_cycles_per_job;\nint: max_cycles_per_job;\nint: max_jobs;\nset of int: jobs = 1..max_jobs;\n\nint: num_colors;\nset of int: colors = 1..num_colors;\n\nint: num_programs;\nset of int: programs = 1..num_programs;\n\nint: num_moulds;\nset of int: moulds = 1..num_moulds;\n\nint: num_demands;\nset of int: demands = 1..num_demands;\n\nint: num_lines;\nset of int: lines = 1..num_lines;\n\narray[moulds] of int: available_moulds;\narray[moulds] of set of int: demanded_colors_for_mould = [\n                                                  {c | c in colors where\n                                                    exists(d in demands)(demand_color[d] = c\n                                                                         /\\ demand_mould[d] = m)                                         }\n                                                | m in moulds];\n\narray[programs] of int: slots_per_program;\narray[0..num_programs] of int: slots_per_program_0 = array1d(0..num_programs, [0] ++ slots_per_program);\n\narray[programs] of int: cycle_time_for_program;\narray[0..num_programs] of int: cycle_time_for_program_0 = array1d(0..num_programs, [0] ++ cycle_time_for_program);\n\narray[moulds] of programs: program_for_mould;\narray[moulds] of lines: line_for_mould;\n\narray[colors, colors] of 0..1: color_compatibility;\n\narray[demands] of int: demand_qty;\narray[demands] of int: demand_duedate;\narray[demands] of colors: demand_color;\narray[demands] of moulds: demand_mould;\n\narray[demands] of set of int: compatible_demands = [\n                                                    {d2 | d2 in demands where  demand_duedate[d2] <= demand_duedate[d]\n                                                                               /\\ demand_mould[d2] = demand_mould[d]\n                                                                               /\\ demand_color[d2] = demand_color[d]\n                                                    }\n                                                    | d in demands];\n\n% decision variables\narray[jobs] of var 0..num_programs: job_program;\nset of int: cycle_set = min_cycles_per_job..max_cycles_per_job;\narray[jobs] of var cycle_set: job_length;\narray[jobs, moulds, colors] of var 0..max_moulds_per_job: job_moulds;\narray[jobs, moulds, colors] of var 0..max_moulds_per_job*max_cycles_per_job: total_job_moulds;\n\n% constraints\n\n% break symmetries\nconstraint forall(i in 1..max_jobs-1)(\n  (job_program[i] = 0) -> (job_program[i+1] = 0)\n);\nconstraint forall(i in jobs)(\n  ((job_program[i] = 0) -> (job_length[i] = min_cycles_per_job))\n);\n\n% check number of assigned moulds per job\nconstraint forall(i in jobs)(\n  sum(k in moulds, l in colors)(job_moulds[i,k,l]) = slots_per_program_0[job_program[i]]\n);\n\n% check number of available moulds per type\nconstraint forall(i in jobs, k in moulds)(\n  sum(l in colors)(job_moulds[i,k,l]) <= available_moulds[k]\n);\n\n% check the number of colors and lines per job\nconstraint forall(i in jobs)(\n  count(l in colors, m in lines)(sum(k in moulds where line_for_mould[k] = m)(job_moulds[i,k,l]) > 0) <= max_colors_per_job\n);\n\n% check demands are fulfilled\nconstraint forall(m in moulds, c in demanded_colors_for_mould[m])(\n  sum(d in demands where demand_mould[d] = m /\\ demand_color[d] = c)(demand_qty[d])\n  <=\n  sum(i in jobs) (total_job_moulds[i,m,c])\n);\n\n% enforce that moulds are compatible with programs\nconstraint forall(i in jobs, k in moulds)(\n  (job_program[i] != program_for_mould[k]) -> forall(l in colors)(job_moulds[i,k,l] = 0)\n);\n\n% check color compatiblity\nconstraint forall(i in jobs, c1 in colors, c2 in c1+1..num_colors where color_compatibility[c1,c2] = 0)(\n  (sum(k in moulds)(job_moulds[i,k,c1]) > 0)\n  -> (forall(k in moulds)(job_moulds[i,k,c2] = 0))\n);\n\n% channel total job moulds\nconstraint forall(i in jobs, k in moulds, l in colors)(\n  total_job_moulds[i,k,l] = job_moulds[i,k,l] * job_length[i]\n);\n\n\n% soft constraints\n%\n% auxiliary variables\n%\nint: max_cycle_time = max(cycle_time_for_program);\nint: min_cycle_time = min(cycle_time_for_program);\nint: lower_bound_end = min_cycle_time*min_cycles_per_job;\nint: upper_bound_end = max_jobs*max_cycles_per_job*max_cycle_time\n                        + max_jobs*program_setup_time;\nint: upper_bound_time = max_cycles_per_job*max_cycle_time;\n\nint: ub_waste_per_job = max_moulds_per_job*max_cycles_per_job;\n\narray[jobs] of var lower_bound_end..upper_bound_end: job_end;\narray[jobs] of var 0..upper_bound_time: job_time;\narray[demands] of var lower_bound_end..upper_bound_end: demand_end;\narray[demands] of var jobs: demand_end_job;\n\nvar lower_bound_end..upper_bound_end: makespan;\nvar 0..ub_waste_per_job*max_jobs: waste;\nint: ub_tardiness = sum(d in demands)(max([0,upper_bound_end-demand_duedate[d]]));\nvar 0..ub_tardiness: tardiness;\n\n%\n% soft constraints\n%\n\n% set job times\nconstraint forall(i in jobs, p in programs where job_program[i] == p)(\n  job_time[i] = job_length[i]*cycle_time_for_program_0[p]\n);\n\n\n% set job end times\nconstraint forall(i in jobs where job_program[i] > 0)(\n  job_end[i] = job_time[1] + sum(k in 2..i)(job_time[k] + sequence_setup_time\n                 + bool2int(job_program[k-1] != job_program[k])\n                 * additional_setup_time)\n);\nconstraint forall(i in jobs where job_program[i] = 0)(\n  job_end[i] = lower_bound_end\n);\n\n\n% set demand end times\nconstraint forall(d in demands)(\nlet {\n   int: k = demand_mould[d];\n   int: l = demand_color[d];  \n}\nin\n  demand_end[d] = job_end[demand_end_job[d]]\n  /\\\n  job_program[demand_end_job[d]] > 0\n  /\\\n  sum(i in 1..demand_end_job[d]) (total_job_moulds[i,k,l])\n  >= sum(d2 in compatible_demands[d])\n     (demand_qty[d2])\n  /\\\n  sum(i in 1..demand_end_job[d]-1) (total_job_moulds[i,k,l])\n  < sum(d2 in compatible_demands[d])\n     (demand_qty[d2])  \n);\n\n% makespan\nconstraint (\n  makespan = max(job_end)\n);\n\n% waste\nconstraint (\n  waste = sum(i in jobs,\n              k in moulds,\n              l in colors)(total_job_moulds[i,k,l])\n          - \n          sum(d in demands)(demand_qty[d])\n);\n\n% tardiness\nconstraint (\n   tardiness = sum(d in demands)(max([0,demand_end[d] - demand_duedate[d]]))\n);\n\nann : search = int_search([job_moulds[i,k,l] | i in jobs, k in moulds, l in colors],\n                          smallest,\n                          indomain_min,\n                          complete);\nsolve::search minimize makespan + tardiness + waste;\n"
    },
    "black-hole": {
        "description": "", 
        "script": "%------------------------------------------------------------------------%\n% Solving the Black Hole Patience game\n%------------------------------------------------------------------------%\n%\n%  The model of the problem is taken from \"Search in the Patience Game\n%  'Black Hole'\", by Ian P. Gent, Chris Jefferson, Tom Kelsey, In\u00eas\n%  Lynce, Ian Miguel, Peter Nightingale, Barbara M. Smith, and\n%  S. Armagan Tarim. It only implements the basic model. The instances\n%  are generated by the black hole patience model in the Gecode\n%  distribution.\n%\n%  This model uses the following global constraints\n%    - inverse\n%    - table\n%\n%  Main authors:\n%     Mikael Zayenz Lagerkvist <lagerkvist@gecode.org>\n%\n%  Copyright:\n%     Mikael Zayenz Lagerkvist, 2009\n%\n%  Permission is hereby granted, free of charge, to any person obtaining\n%  a copy of this software and associated documentation files (the\n%  \"Software\"), to deal in the Software without restriction, including\n%  without limitation the rights to use, copy, modify, merge, publish,\n%  distribute, sublicense, and/or sell copies of the Software, and to\n%  permit persons to whom the Software is furnished to do so, subject to\n%  the following conditions:\n%\n%  The above copyright notice and this permission notice shall be\n%  included in all copies or substantial portions of the Software.\n%\n%  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n%  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n%  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n%  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n%  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n%  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n%  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n%\n"
    },
    "carpet-cutting": {
        "description": "", 
        "script": "%-----------------------------------------------------------------------------%\n% vim: ts=4 sw=4 et wm=0 tw=0\n%-----------------------------------------------------------------------------%\n% \n% This file contains a model for a carpet cutting problem in which carpet\n% shapes must be cut from a carpet roll minimising the wastage, i.e., the\n% needed length of the carpet roll.\n%         _____________________\n%        |                   (_)\n%        |                   | |\n%        |                   | |\n%  Width |                   | |\n%        |                   | |\n%        |                   | |\n%        |___________________(_)..."},
    "cgt": {"description": "", "script": "/*\r\nOptimisation of Australian capital gains tax\r\n\r\nWritten by Jason Nguyen\r\n\r\nMIT Licence\r\n\r\nCopyright 2025 Monash University\r\n \r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to\r\ndeal in the Software without restriction, including without limitation the\r\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\nsell copies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\ninclude \"globals.mzn\";\r\n\r\nenum TRADE = { Buy, Sell };\r\n\r\n% Stocks in portfolio\r\nenum STOCK;\r\n\r\n% The trades which occurred\r\narray [int] of record(\r\n  int: date,\r\n  TRADE: trade,\r\n  STOCK: stock,..."},
    "EchoSched": {"description": "", "script": "% Modifications by MiniZinc Challenge Organizers:\r\n% - Modify search annotation to allow running in FD\r\n% - Name objective variable `objective`\r\n% - Fix redundant constraint to be hard constraint\r\n\r\n% sets\r\nset of int: JOBS;\r\nset of int: MACHINES;\r\nint: SPEED;\r\n\r\n% data\r\narray[JOBS,MACHINES,1..SPEED] of int: time;\r\narray[JOBS,MACHINES,1..SPEED] of int: energy;\r\narray[JOBS,MACHINES] of int: precedence;\r\n\r\n% variables\r\narray[JOBS,MACHINES] of var 0..sum(time): start_time :: output;\r\narray[JOBS,MACHINES] of var 1..SPEED: SpeedScaling :: output;\r\n\r\n\r\nconstraint forall(j in JOBS, p in MACHINES, s in MACHINES where p != s)(\r\n  if precedence[j,p] > precedence[j,s] then\r\n      start_time[j,p] >= start_time[j,s] + time[j,s,SpeedScaling[j,s]]\r\n  else\r\n      start_time[j,s] >= start_time[j,p] + time[j,p,SpeedScaling[j,p]]\r\n  endif\r\n);\r\n\r\n\r\nconstraint forall(j1 in JOBS, j2 in JOBS, m in MACHINES where j1 < j2)(\r\n  %redundant_constraint (start_time[j1,m] + time[j1,m,SpeedScaling[j1,m]] <= start_time[j2,m] \/ start_time[j2,m] + time[j2,m,SpeedScaling[j2,m]] <= start_time[j1,m]\r\n  (start_time[j1,m] + time[j1,m,SpeedScaling[j1,m]] <= start_time[j2,m] \/ start_time[j2,m] + time[j2,m,SpeedScaling[j2,m]] <= start_time[j1,m]\r\n));\r\n\r\n\r\nvar int: makespan :: output                    = max([start_time[j,m] + time[j,m,SpeedScaling[j,m]] | m in MACHINES, j in JOBS]);\r\nvar int: consumedEnergy :: output              = sum(m in MACHINES, j in JOBS) (energy[j,m,SpeedScaling[j,m]]);\r\n\r\nvar int: objective = makespan + consumedEnergy;\r\n"},
    "fbd1": {"description": "", "script": "%Copyright 2025 Andrew Gill\n%Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n%The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n%THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n% Modifications by MiniZinc Challenge Organizers:\n% - Add search annotation\n% - Name objective variable `objective`\n\n% FBD1 design construction.\n% Global constraints.\ninclude \"globals.mzn\";\n\n% Set up parameters. The number of factors is k, which represents the size of the design problem.\n% For k in 2..8 and using 1 thread, optimal solutions are easy-to-solve, and are found within 10 minutes (using Gecode).\n% Toy instances are represented by k=2 or k=3.\n% Using 30 threads, k=9 takes 13 minutes to solve (using Gecode). With 1 thread, it takes 2.25 hours.\n% Thus, hard-to-solve instances will be k in 10..20.\n\nint: k; % Read in from FBDxx.dzn\nint: maxn = 5+k^3; % Upper bound for the design size and by inference the design variables.\n\n% The design/decision variables.\nset of int: main_factors = 1..k;\narray[main_factors] of var 1..maxn div 2 : n;\nvar 1..maxn+1: n_star;\n\n% The intermediate variables.\narray[int] of var int: Q ::output = [2*ni | ni in n];\narray[int] of var int: T_plus ::output = [n[j] + n[i] | i,j in main_factors where i < j];\narray[int] of var int: T_minus ::output = [n[j] - n[i] | i,j in main_factors where i < j];\narray[int] of var int: Q_folded ::output = [2*n[k] + n_star - 2*ni | ni in n];\narray[int] of var int: T_plus_folded ::output = [2*n[k] + n_star - t | t in T_plus];\n\n% The design size (objective function).\nvar int: N ::output = 2*n[k] + n_star;\n\n% Design variables strictly increasing.\nconstraint forall([n[i] < n[i+1] | i in main_factors where i < k]);\n\n"},
    "groupsplitter": {"description": "", "script": "%\n% Model for group splitting problem\n%\n% A group of people want to do activities (Cinema then Restaurant)  \n% in subgroups where the activities for subgroups are supposed to \n% match better members' preferences.\n% The aim of our model is to find the best activities and group\n% combinations to recommend.\n%\n% @authors:\n%\n% Jacopo Mauro <mauro.jacopo@gmail.com>\n% Tong Liu <t.liu@unibo.it>\n%\n\ninclude \"count.mzn\";\ninclude \"table.mzn\";\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Variables and array definitions\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% number of users\nset of int: user_ids;\n\n% activities for phase 1\nset of int: activity1_ids;\n\n% activities for phase 2\nset of int: activity2_ids;\n\n% number of cells\nset of int: cell_ids;\n\n% number of groups\nset of int: group_ids;\n\n% time domain\nset of int: time_slot_ids;\n\n"},
    "gt-sort": {"description": "", "script": "% Modifications by MiniZinc Challenge Organizers:\r\n% - Add search annotation and refactor out y variables so that they can be searched\r\n% - Name objective variable `objective`\r\n% - Move c into data rather rather than using uniform random\r\n\r\ninclude \"globals.mzn\";\r\n\r\nenum Run = { BASELINE, BEST, WORST};\r\n\r\nRun: run::output;\r\n\r\n% BASELINE = false;\r\n\r\n% 2*x1 + 3*x2 + 2*x3 + 5*x4 <= k\r\narray[int] of int: c::output;\r\n\r\n% c = [2,3,2,5]; % same as baseline\r\n\r\n% c = [1,3,3,5]; % better by 1\r\n% f = 0.75;\r\n\r\n% generate instance of n variables with coefficients [1,ub]\r\nint: n::output;\r\nint: ub::output;\r\nfloat: f::output; % k is chosen based on strictness factor f\r\n\r\n% c = [ uniform(1,ub) | i in 1..n ] ++ if n mod 2 == 1 then [0] endif; % pad with 0 term if odd\r\narray[int] of set of int: s = [ {0, ci} | ci in reverse(sort(c)) ];\r\n\r\nint: u::output = sum([ max(si) | si in s]);\r\nint: k::output = round(f * u);\r\n\r\n% number of layers\r\nset of int: L = 1..(1+ceil(log2(length(c))));\r\n\r\n% x[i,j] = values of node j at layer i\r\narray[L,index_set(s)] of var set of min(si in s, a in si)(a)..k: x;\r\n\r\nconstraint x[1,..] = s; % first layer is fixed (! sometimes causes a bug with nosets.mzn for chuffed)\r\n\n"},
    "hitori": {"description": "", "script": "% Hitori https://www.puzzle-hitori.com/\nint: n; % size of square\nset of int: ROW = 1..n;\nset of int: COL = 1..n;\nset of int: NUM = 1..n;\nset of int: NUM0 = 0..n;\narray[ROW,COL] of NUM: clue;\n\n% decisions, which squares are marked as black\narray[ROW,COL] of var bool: filled;\narray[ROW,COL] of var NUM0: x =\n  [(r,c): if filled[r,c] then 0 else clue[r,c] endif | r in ROW, c in COL];\n\n% never black out clues that appear once in row and column\n/*\ninclude \"count.mzn\";\nconstraint forall(r in ROW, c in COL)\n                 (if count(clue[r,..],clue[r,c]) = 1\n                     /\\ count(clue[..,c],clue[r,c]) = 1 \n                 then filled[r,c] = false endif);\n*/\n%% if two identical clues are adjacent all equal clue values in\n%% the row/col have to be filled in (since one of these two will not be)\nconstraint forall(r in ROW)\n                 (let { int: cc = arg_max(\n                        [ clue[r,c] = clue[r,c+1] | c in 1..n-1 ] \n                        ++ [true]); } in\n                  if cc < n then\n                     forall(c in 1..n where c != cc /\\ c != cc + 1 /\\ \n                                      clue[r,c] = clue[r,cc])(filled[r,c])\n                  endif);\nconstraint forall(c in COL)\n                 (let { int: rr = arg_max(\n                        [ clue[r,c] = clue[r+1,c] | r in 1..n-1 ] \n                        ++ [true]); } in\n                  if rr < n then\n                     forall(r in 1..n where r != rr /\\ r != rr + 1 /\\ \n                                      clue[r,c] = clue[rr,c])(filled[r,c])\n                  endif);\n%% a cell between two identical cells cannot be filled\n..."},
    "ihtc-2024-kletzander": {"description": "", "script": "% Copyright 2025 Lucas Kletzander\r\n%\r\n%Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the %\u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, %distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the %following conditions:\r\n%\r\n%The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n%\r\n%THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF %MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY %CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE %OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n% Modifications by MiniZinc Challenge Organizers:\r\n% - Add search annotation\r\n\r\ninclude \"globals.mzn\";\r\n\r\nint: num_occupants;\r\nset of int: C = 1..num_occupants;\r\nint: num_patients;\r\nset of int: P = 1..num_patients;\r\nint: horizon;\r\nset of int: D = 0..horizon-1;\r\nint: num_rooms;\r\nset of int: R = 1..num_rooms;\r\nint: num_ot;\r\nset of int: O = 1..num_ot;\r\nint: max_incompatible;\r\nset of int: MI = 1..max_incompatible;\r\nint: num_surgeons;\r\nset of int: S = 1..num_surgeons;\r\nint: weight_selection;\r\nint: weight_delay;\r\n\r\narray[C] of int: oc_length_of_stay;\r\narray[C] of int: oc_gender;\r\narray[C] of int: oc_room;\r\narray[P] of int: length_of_stay;\r\narray[P] of int: gender;\r\narray[P,MI] of int: incompatible_rooms;\r\narray[P] of bool: mandatory;\r\narray[P] of int: surgery_duration;\r\narray[P] of int: surgeon;\r\narray[P] of int: release_day;\n..."},
    "ihtc-2024-marte": {"description": "", "script": "%% Integrated Healthcare Timetabling\n\n/*\nThis model was developed to compete in the Integrated Healthcare Timetabling Competition 2024\n(https://ihtc2024.github.io/).\n\nAll constraint descriptions (see comments marked with H<n> and S<n> throughout the model)\nwere copied from the competition's problem specification.\n\nThis model is released under the terms of the MIT license (see LICENSE.txt).\n\nContact: Michael Marte <informarte@freenet.de>\n*/\n\n% Modifications by MiniZinc Challenge Organizers:\n% - Modify search annotation to allow running in FD\n\ninclude \"all_different.mzn\";\ninclude \"bin_packing_load.mzn\";\ninclude \"cumulative.mzn\";\ninclude \"nvalue_fn.mzn\";\n\n\n%% Input\n\nint: days;\nint: skill_levels;\narray[1..3] of string: shift_types;\nlist of string: age_groups;\nlist of string: genders;\n\ntype Occupant = record(\n  string: id,\n  int: index,\n  string: gender,\n  string: age_group,\n  int: length_of_stay,\n  list of int: workload_produced,\n  list of int: skill_level_required,\n  string: room_id  \n..."},
    "is": {"description": "", "script": "% Copyright (c) 2013-2015, Gabriel Hjort Blindell <ghb@kth.se>\n% All rights reserved.\n%\n% Redistribution and use in source and binary forms, with or without\n% modification, are permitted provided that the following conditions are met:\n%\n% 1. Redistributions of source code must retain the above copyright notice,\n%    this list of conditions and the following disclaimer.\n% 2. Redistributions in binary form must reproduce the above copyright notice,\n%    this list of conditions and the following disclaimer in the documentation\n%    and/or other materials provided with the distribution.\n%\n% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n% POSSIBILITY OF SUCH DAMAGE.\n\n\n\n%=====================\n% EXTERNAL PARAMETERS\n%=====================\n\n% Function data.\nint: numOperationsInFunction;\nint: numDataInFunction;\nint: numBlocksInFunction;\nint: entryBlockOfFunction;\narray[allBlocksInFunction] of set of int: domSetOfBlockInFunction;\narray[allBlocksInFunction] of set of int: defEdgesForBlockInFunction;\narray[int] of allDataInFunction: statesInFunction;\narray[allBlocksInFunction] of int: execFrequencyOfBlockInFunction;\n..."},
    "mondoku": {"description": "", "script": "% monduko model\n% Description in https://www.reddit.com/r/generative/comments/1fxp5ng/irregular_mondoku_art/\n%\n% For each row and column in a matrix, each color is represented but only in one group.\n% That is, for width 4 and 2 colors, RRGG is allowed, but not RGGR.\n%\n% In order to Get a \"balanced\" output, this model minimizes the maximum difference \n% between the minimum and maximum occurences of any color for any row or column.\n% That is, for a row GGGBBRRRR, there are four R's and two B's, which gives a difference\n% of 2.\n%\n\n\n% By Mikael Zayenz Lagerkvist 2024\n% Released under MIT license\n\n\n% Modifications by MiniZinc Challenge Organizers:\n% - Add search annotation\n\ninclude \"globals.mzn\";\n\n%\n% Data definitions, the width, height, and number of colors\n%\n\nint: W; % width\nint: H; % height\nint: C; % num colors\n\n%\n% Derived data, sets of ints\n%\n\nset of int: Colors = 1..C;\nset of int: Width  = 1..W;\nset of int: Height = 1..H;\n\n%\n% Variables\n..."},
    "products-and-shelves": {"description": "", "script": "% ------------------------------------------------------------------------------\n% Copyright 2025 Ericsson\n%\n% Permission is hereby granted, free of charge, to any person obtaining a copy\n% of this software and associated documentation files (the \u201cSoftware\u201d), to deal\n% in the Software without restriction, including without limitation the rights\n% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n% copies of the Software, and to permit persons to whom the Software is\n% furnished to do so, subject to the following conditions:\n%\n% The above copyright notice and this permission notice shall be included in all\n% copies or substantial portions of the Software.\n%\n% THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n% SOFTWARE.\n% ------------------------------------------------------------------------------\n%% Author: Danyal Mirza danyal.mirza@ericsson.com\n%% Problem description:\n% In a warehouse, a number of products are to be placed on some shelves such that\n% the the minimum amount of shelves are used. These products are all shaped like\n% 3-dimensional boxes, with dimensions length, width and height. The shelves are\n% also shaped like 3-dimensional boxes with dimensions length, width and height\n% and the number of shelves are finite. Neither the shelf or the products are\n% allowed to be rotated.\n%\n%            +--------------+\n%           /|             /|\n%          / |            / |\n%         *--+-----------*  |\n%         |  |           |  |\n% height->|  |           |  |\n%         |  |           |  |\n%         |  +-----------+--+\n%         | / <-width    | /\n%         |/             |/\n..."},
    "proteindesign12": {"description": "", "script": "%\n% Binary Weighted CSP wcsp format reader for MiniZinc\n%\n% A Weighted Constraint Satisfaction Problem (WCSP) P is a triplet P=(X,F,k)\n% where X is a set of variables and F a set of cost functions. \n% Each variable has a finite domain of values that can be assigned to it. \n% A binary (resp. unary) cost function f(x,y) in F (resp. f(x))\n% is a function which associates to every assignment t of its variable(s) \n% a positive integer in [0,k] where k is a maximum integer cost \n% used for representing forbidden assignments.\n% \n% The Weighted Constraint Satisfaction Problem is to find a complete assignment t\n% minimizing the total cost sum_{f(x) in F} f(t[x]) + sum_{f(x,y) in F} f(t[x],t[y])\n% where t[x] denotes the projection of t over variable x.\n% This optimization problem has an associated NP-complete decision problem.\n%\n% See https://mulcyber.toulouse.inra.fr/scm/viewvc.php/trunk/toulbar2/doc/?root=toulbar2\n% or http://costfunction.org/mobyle/htdocs/portal/help/wcsp.html\n% or http://graphmod.ics.uci.edu/group/WCSP_file_format\n% for a more general description of the wcsp format (including global cost functions)\n%\n% Usage: awk -f wcsp2dzn.awk smallrandom.wcsp 10 1 > smallrandom.dzn\n%        minizinc wcsp.mzn smallrandom.dzn\n%\n% Warning: wcsp problem file must have only unary and binary cost functions in extension with all tuples defined\n%\n\n% \n% This MiniZinc model was created by Simon de Givry, degivry@toulouse.inra.fr\n%\n\ninclude \"globals.mzn\"; \n\nint: num_variables;\n\n% domains\nint:max_domain;\narray[1..num_variables] of int: domains;\n\n% unary and binary cost functions in extension\n..."},
    "skill-allocation": {"description": "", "script": "include \"globals.mzn\";\n\n%%% Date file\n% include \"skill_allocation_mzn_4d_1.dzn\";\n% include \"skill_allocation_mzn_4d_2.dzn\";\n% include \"skill_allocation_mzn_5d_1.dzn\";\n% include \"skill_allocation_mzn_5d_2.dzn\";\n% include \"skill_allocation_mzn_5d_3.dzn\";\n% include \"skill_allocation_mzn_2w_1.dzn\";\n% include \"skill_allocation_mzn_2w_2.dzn\";\n% include \"skill_allocation_mzn_1m_1.dzn\";\n% include \"skill_allocation_mzn_1m_2.dzn\";\n% include \"skill_allocation_mzn_1m_3.dzn\";\n% include \"skill_allocation_mzn_2m_1.dzn\";\n% include \"skill_allocation_mzn_2m_2.dzn\";\n% include \"skill_allocation_mzn_2m_3.dzn\";\n% include \"skill_allocation_mzn_3m_1.dzn\";\n% include \"skill_allocation_mzn_3m_2.dzn\";\n% include \"skill_allocation_mzn_3m_3.dzn\";\n\n%%%%%% Input %%%%%%%\nint: nNewSkillsPerPerson;   % Number of new skills a person is allowed to learn\nint: nTrainingCap = -1;      % Number of training allowed in during the considered period in total. This is to put a cap on the training budget.\nint: nInterstateCap = -1; % -1 - no cap\nint: nOverseasCap = 5; % -1 - no cap\nint: nMaxJobs;   % Maximum number of jobs a person is allowed to perform, 0 - switch off the constraint\nint: nMinJobs = 0;   % Minimum number of jobs a person is allowed to perform, 0 - switch off the constraint\nbool: allEng = false;  % Allow an engineer to perform any job, i.e. skill matching contraint is not applied.\n%%%%%%%%%%%%%%%%%\n\n%%% All Skills\narray[int] of string: sSkills;\nset of int: SKILLS = index_set(sSkills);\n\n%%% Training\nset of int: TRAINING = 1..nNewSkillsPerPerson;\n\n%%% Employee data\narray[int,int] of int: engineer_skills;\narray[int] of int: engineer_location; % Postcode\n..."},
    "stripboard": {"description": "", "script": "/*\r\nLayout for electrical components on stripboard.\r\n\r\nTakes component footprints, pin locations and pinlist as input and tries\r\nto produce the most compact layout.\r\n\r\nWritten by Jason Nguyen\r\n\r\nMIT Licence\r\n\r\nCopyright 2022 Monash University\r\n \r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to\r\ndeal in the Software without restriction, including without limitation the\r\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\nsell copies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\ninclude \"globals.mzn\";\r\n\r\n% Board configuration\r\nint: max_w;\r\nint: max_h;\r\nint: max_links;\r\n% Circuit configuration\r\nenum COMPONENT;\r\nenum PIN;..."},
    "tower": {"description": "", "script": "include \"globals.mzn\";\nenum TOWER;\n\nenum HANDSET;\n\nint: min_signal_strength;\n\nint: maxpower = 10;\nset of int: POWER = 1..maxpower;\narray [POWER] of int: effective_power = [ 2 * (p-1) * (p-1) | p in POWER ];\n\narray [TOWER] of int: capacity;\narray [HANDSET] of int: demand;\n\n% main decisions\narray[TOWER] of var 0..maxpower: power;\n\nfloat: POWER_SCALE = 10000;\narray[HANDSET, TOWER] of float: distance;\n\n% Effective power loss for handset/tower pairs. Scaled up to make everything integer.\narray[HANDSET, TOWER] of float: attenuation = array2d(HANDSET,TOWER,\n  [ POWER_SCALE / (distance[h, t] * distance[h, t]) | h in HANDSET, t in TOWER ]);\narray[HANDSET, TOWER] of int: attenuation_i = array2d(HANDSET, TOWER, [round(attenuation[h, t]) | h in HANDSET, t in TOWER ]);\n%constraint trace(\"attenuation = \\(attenuation);\\n\");\n\narray[HANDSET] of var TOWER: tower = [ to_enum(TOWER, arg_max(t in TOWER)(signal_strength(t, h))) | h in HANDSET ];\n\n% Manual implementation of Boolean par argmax.\nfunction int: arg_max_(array [int] of int: idx, array [int] of int: tl, int: best, int: acc) =\n  if length(tl) = 0 then\n    best\n  elseif tl[1] > acc then\n    arg_max_(array1d(idx[2..]), array1d(tl[2..]), idx[1], tl[1])\n  else\n    arg_max_(array1d(idx[2..]), array1d(tl[2..]), best, acc)\n  endif;\n\nfunction int: arg_max(array [int] of bool: elts) =\n  let {\n..."},
    "tsptw": {"description": "", "script": "% Copyright 2025 Frej Knutar Lewander\n% \n% Permission is hereby granted, free of charge, to any person obtaining a copy \n% of this software and associated documentation files (the \u201cSoftware\u201d), to deal \n% in the Software without restriction, including without limitation the rights \n% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n% copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n%\n% The above copyright notice and this permission notice shall be included in \n% all copies or substantial portions of the Software.\n%\n% THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n% SOFTWARE.\ninclude \"globals.mzn\";\nint: numLocations; % the total number of locations (including the depot)\nset of int: Locations = 1..numLocations;\n% early[l] = the earliest visiting time of location l:\narray[Locations] of int: early;\n% late[l] = the latest visiting time of location l:\narray[Locations] of int: late;\narray[Locations, Locations] of int: duration;\nint: depot = 1; % The first location is the depot\n% pred[l] = the location visited before location l:\narray[Locations] of var Locations: pred;\n% durToPred[l] = the distance from location pred[l] to location l:\narray[Locations] of var 0..max(duration): durToPred = [\n    duration[l, pred[l]] | l in Locations];\n% arrival[l] = the arrival at location l:\narray[Locations] of var 0..max(late): arrival;\n% departure[l] = the departure at location l:\narray[Locations] of var min(early)..max(late): departure = [0] ++ [\n    max(arrival[l], early[l]) | l in 2..numLocations];\n% departurePred[l] = the departure from location pred[l]:\narray[Locations] of var 0..max(late): departurePred = [\n..."},
    "work-task-variation": {"description": "", "script": "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% This is a model for the Work Task Variation problem\n%\n% Copyright (c) 2025, Mikael Zayenz Lagerkvist and Magnus Rattfeldt\n% \n% Permission is hereby granted, free of charge, to any person obtaining a copy\n% of this software and associated documentation files (the \"Software\"), to deal\n% in the Software without restriction, including without limitation the rights\n% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n% copies of the Software, and to permit persons to whom the Software is\n% furnished to do so, subject to the following conditions:\n% \n% The above copyright notice and this permission notice shall be included in all\n% copies or substantial portions of the Software.\n% \n% THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n% SOFTWARE.\n%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n% Modifications by MiniZinc Challenge Organizers:\n% - Add search annotation\n% - Name objective variable `objective`\n\ninclude \"globals.mzn\";\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% Data definitions\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nenum Resources;\nenum Activities;\n\nenum ActivitiesOrNone = A(Activities) ++ { None };\n..."}
}
