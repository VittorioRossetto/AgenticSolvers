
import os
import requests
from flask import Flask, request, render_template_string
import markdown as md


app = Flask(__name__)

# Register markdown filter for Jinja2
@app.template_filter('markdown')
def markdown_filter(text):
    return md.markdown(text)

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

PROMPT_DESCRIPTION = '''The Black Hole Patience game is a solitaire card game. The MiniZinc model below encodes the rules and constraints for solving the game. The goal is to determine which constraint programming solver would be best suited for this problem, considering the following options:

- Gecode
- Chuffed
- Google OR-Tools CP-SAT
- HiGHS
- COIN-OR CBC

Please analyze the model and recommend the best solver for this problem, explaining your reasoning.'''

MZN_SCRIPT = '''%------------------------------------------------------------------------%
% Solving the Black Hole Patience game
%------------------------------------------------------------------------%
%  The model of the problem is taken from "Search in the Patience Game 'Black Hole'". It only implements the basic model. The instances are generated by the black hole patience model in the Gecode distribution.
%  This model uses the following global constraints
%    - inverse
%    - table
include "table.mzn";
include "inverse.mzn";
array[1..416, 1..2] of int: neighbours;
array[1..17, 1..3] of int: layout;
array[1..52] of var 1..52: x;
array[1..52] of var 1..52: y;
constraint x[1] == 1;
constraint forall(i in 1..51) (table([x[i], x[i+1]], neighbours));
constraint inverse(x, y) :: domain;
constraint forall(i in 1..17, j in 1..2) (y[layout[i,j]] < y[layout[i,j+1]]);
solve :: int_search(x, input_order, indomain_min, complete) satisfy;
output [ "x = ", show(x), ";\n" ];'''

PROMPT = f"{PROMPT_DESCRIPTION}\n\nMiniZinc model:\n{MZN_SCRIPT}"

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head><title>Gemini Black Hole Solver Recommendation</title></head>
<body>
    <h2>Gemini Recommendation for Black Hole Solver</h2>
    {% if response %}
        <div>{{ response | markdown | safe }}</div>
    {% endif %}
    <form method="post">
        <button type="submit">Ask Gemini</button>
    </form>
</body>
</html>
'''

@app.route('/', methods=['GET', 'POST'])
def index():
    response_text = None
    if request.method == 'POST':
        headers = {
            'Content-Type': 'application/json',
            'X-goog-api-key': GEMINI_API_KEY
        }
        payload = {
            "contents": [
                {
                    "parts": [
                        {"text": PROMPT}
                    ]
                }
            ]
        }
        r = requests.post(f"{GEMINI_URL}?key={GEMINI_API_KEY}", json=payload, headers={'Content-Type': 'application/json'})
        data = r.json()
        # Try to extract the main text response
        response_text = data.get('candidates', [{}])[0].get('content', {}).get('parts', [{}])[0].get('text', str(data))
    return render_template_string(HTML_TEMPLATE, response=response_text)

if __name__ == '__main__':
    app.run(debug=True)
